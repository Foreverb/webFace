{"ast":null,"code":"import _classCallCheck from \"D:\\\\webFace\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\webFace\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\webFace\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"D:\\\\webFace\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\webFace\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\webFace\\\\src\\\\Components\\\\emjoi.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n//表情栏\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport { Emoji } from 'emoji-mart';\nimport React, { Component } from 'react';\nimport ChatClient from '../ChatClient';\nimport '../css/emjoi.css';\nvar customEmojis = [{\n  name: 'Octocat',\n  short_names: ['octocat'],\n  text: '',\n  emoticons: [],\n  keywords: ['github'],\n  imageUrl: 'https://github.githubassets.com/images/icons/emoji/octocat.png',\n  customCategory: 'GitHub'\n}, {\n  name: 'Test Flag',\n  short_names: ['test'],\n  text: '',\n  emoticons: [],\n  keywords: ['test', 'flag'],\n  spriteUrl: 'https://unpkg.com/emoji-datasource-twitter@4.0.4/img/twitter/sheets-256/64.png',\n  sheet_x: 1,\n  sheet_y: 1,\n  size: 64,\n  sheetColumns: 52,\n  sheetRows: 52\n}];\n\nvar Emjoi = /*#__PURE__*/function (_Component) {\n  _inherits(Emjoi, _Component);\n\n  var _super = _createSuper(Emjoi);\n\n  function Emjoi(props) {\n    _classCallCheck(this, Emjoi);\n\n    return _super.call(this, props);\n  } //在输入框内添加表情\n\n\n  _createClass(Emjoi, [{\n    key: \"setEmjoi\",\n    value: function setEmjoi(e) {\n      this.setState({\n        cls_icon: ['iconCard']\n      });\n      var input = document.getElementsByClassName('input')[0];\n      var str = input.innerText; //获取光标位置\n\n      var pos = ChatClient.getCursortPosition(input); //将输入框内容截成两段\n\n      var msg_1 = str.substring(0, pos);\n      var msg_2 = str.substring(pos); //获取点击的表情的name属性\n\n      var faceName = e.target.name;\n      input.innerText = [msg_1, msg_2].join(faceName);\n      ChatClient.setCaretPosition(input, pos + faceName.length);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = this.props.className;\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Picker, {\n        custom: customEmojis,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Emjoi;\n}(Component);\n\nexport default Emjoi;","map":{"version":3,"sources":["D:/webFace/src/Components/emjoi.js"],"names":["Picker","Emoji","React","Component","ChatClient","customEmojis","name","short_names","text","emoticons","keywords","imageUrl","customCategory","spriteUrl","sheet_x","sheet_y","size","sheetColumns","sheetRows","Emjoi","props","e","setState","cls_icon","input","document","getElementsByClassName","str","innerText","pos","getCursortPosition","msg_1","substring","msg_2","faceName","target","join","setCaretPosition","length","className"],"mappings":";;;;;;;;;;;AAAA;AACA,OAAO,+BAAP;AACA,SAASA,MAAT,QAAuB,YAAvB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAO,kBAAP;AACA,IAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,IAAI,EAAE,SADR;AAEEC,EAAAA,WAAW,EAAE,CAAC,SAAD,CAFf;AAGEC,EAAAA,IAAI,EAAE,EAHR;AAIEC,EAAAA,SAAS,EAAE,EAJb;AAKEC,EAAAA,QAAQ,EAAE,CAAC,QAAD,CALZ;AAMEC,EAAAA,QAAQ,EAAE,gEANZ;AAOEC,EAAAA,cAAc,EAAE;AAPlB,CADmB,EAUnB;AACEN,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,WAAW,EAAE,CAAC,MAAD,CAFf;AAGEC,EAAAA,IAAI,EAAE,EAHR;AAIEC,EAAAA,SAAS,EAAE,EAJb;AAKEC,EAAAA,QAAQ,EAAE,CAAC,MAAD,EAAS,MAAT,CALZ;AAMEG,EAAAA,SAAS,EAAE,gFANb;AAOEC,EAAAA,OAAO,EAAE,CAPX;AAQEC,EAAAA,OAAO,EAAE,CARX;AASEC,EAAAA,IAAI,EAAE,EATR;AAUEC,EAAAA,YAAY,EAAE,EAVhB;AAWEC,EAAAA,SAAS,EAAE;AAXb,CAVmB,CAArB;;IAwBMC,K;;;;;AACJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA,6BACXA,KADW;AAElB,G,CACD;;;;;WACA,kBAASC,CAAT,EAAY;AACV,WAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAE,CAAC,UAAD;AAAZ,OAAd;AACA,UAAIC,KAAK,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,OAAhC,EAAyC,CAAzC,CAAZ;AACA,UAAIC,GAAG,GAAGH,KAAK,CAACI,SAAhB,CAHU,CAIV;;AACA,UAAIC,GAAG,GAAGzB,UAAU,CAAC0B,kBAAX,CAA8BN,KAA9B,CAAV,CALU,CAMV;;AACA,UAAIO,KAAK,GAAGJ,GAAG,CAACK,SAAJ,CAAc,CAAd,EAAiBH,GAAjB,CAAZ;AACA,UAAII,KAAK,GAAGN,GAAG,CAACK,SAAJ,CAAcH,GAAd,CAAZ,CARU,CASV;;AACA,UAAIK,QAAQ,GAAGb,CAAC,CAACc,MAAF,CAAS7B,IAAxB;AACAkB,MAAAA,KAAK,CAACI,SAAN,GAAkB,CAACG,KAAD,EAAQE,KAAR,EAAeG,IAAf,CAAoBF,QAApB,CAAlB;AACA9B,MAAAA,UAAU,CAACiC,gBAAX,CAA4Bb,KAA5B,EAAmCK,GAAG,GAAGK,QAAQ,CAACI,MAAlD;AACD;;;WACD,kBAAS;AAAA,UACDC,SADC,GACa,KAAKnB,KADlB,CACDmB,SADC;AAEP,0BACE;AAAI,QAAA,SAAS,EAAEA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAQ,QAAA,MAAM,EAAElC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAeD;;;;EApCiBF,S;;AAsCpB,eAAegB,KAAf","sourcesContent":["//表情栏\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart'\r\nimport { Emoji } from 'emoji-mart'\r\nimport React, { Component } from 'react';\r\nimport ChatClient from '../ChatClient';\r\nimport '../css/emjoi.css';\r\nconst customEmojis = [\r\n  {\r\n    name: 'Octocat',\r\n    short_names: ['octocat'],\r\n    text: '',\r\n    emoticons: [],\r\n    keywords: ['github'],\r\n    imageUrl: 'https://github.githubassets.com/images/icons/emoji/octocat.png',\r\n    customCategory: 'GitHub'\r\n  },\r\n  {\r\n    name: 'Test Flag',\r\n    short_names: ['test'],\r\n    text: '',\r\n    emoticons: [],\r\n    keywords: ['test', 'flag'],\r\n    spriteUrl: 'https://unpkg.com/emoji-datasource-twitter@4.0.4/img/twitter/sheets-256/64.png',\r\n    sheet_x: 1,\r\n    sheet_y: 1,\r\n    size: 64,\r\n    sheetColumns: 52,\r\n    sheetRows: 52,\r\n  },\r\n]\r\nclass Emjoi extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  //在输入框内添加表情\r\n  setEmjoi(e) {\r\n    this.setState({ cls_icon: ['iconCard'] })\r\n    let input = document.getElementsByClassName('input')[0];\r\n    let str = input.innerText;\r\n    //获取光标位置\r\n    let pos = ChatClient.getCursortPosition(input);\r\n    //将输入框内容截成两段\r\n    let msg_1 = str.substring(0, pos);\r\n    let msg_2 = str.substring(pos);\r\n    //获取点击的表情的name属性\r\n    let faceName = e.target.name;\r\n    input.innerText = [msg_1, msg_2].join(faceName);\r\n    ChatClient.setCaretPosition(input, pos + faceName.length);\r\n  }\r\n  render() {\r\n    let { className } = this.props;\r\n    return (\r\n      <ul className={className}>\r\n        <Picker custom={customEmojis} />\r\n          {/* <span className='point'></span>\r\n          {\r\n            this.state.Code.map((item, index) => {\r\n              return <li className='emjoi_1' key={index}>\r\n                <img src={this.state.emjoi[index]} className='img_1'\r\n                  onClick={(e) => this.setEmjoi(e)} name={item} alt='' />\r\n              </li>\r\n            })\r\n\r\n          } */}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\nexport default Emjoi;\r\n"]},"metadata":{},"sourceType":"module"}