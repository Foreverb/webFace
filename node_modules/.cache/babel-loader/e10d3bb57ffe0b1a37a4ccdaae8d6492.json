{"ast":null,"code":"import _classCallCheck from \"D:\\\\webFace\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\webFace\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\webFace\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"D:\\\\webFace\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\webFace\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\webFace\\\\src\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport './golab.css';\nimport Information from './Components/information';\nimport PublicWrap from './Components/publicWrap';\nimport RightTop from './Components/rightTop';\nimport RightBottom from './Components/rightBottom';\nimport Item from './Components/userItem';\nimport ChatClient from './ChatClient'; // import FileUpload from './fileUpload';\n\nimport Mask from './Components/mask';\nimport VideoWate from './Components/videoWate';\nimport OnVideo from './Components/onVideo';\nimport BreakLine from './Components/breakLine'; // import './ReconnectingWebSocket';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      profile: {\n        //用户信息对象\n        ava: '',\n        //用户头像路径\n        nick: '',\n        //用户昵称\n        id: '',\n        //用户id\n        isOpenPublic: true //用户是否开启了公共频道\n\n      },\n      onlineUserList: [],\n      //  在线用户列表\n      chatRecode: {//用户的聊天记录\n        //其中的每一项都是由 uid:[]组成，数组中的每一项都是一个标准的messageModel\n      },\n      chatInputStaging: {//输入框暂存区\n        //其中的每一项都是由 uid:{string}组成\n      },\n      isFaceTime: false,\n      //用户是否正在视频聊天\n      waitVideo: false,\n      //  用户是否为等待界面\n      videoMsg: false,\n      //  是否显示视频聊天消息（当接收到视频通话请求时，变为true）\n      videoReqInfo: null,\n      //视频聊天请求方的信息\n      chatModePid: -1,\n      //正在聊天的模式(公聊，私聊)\n      onclose: false,\n      //  断开连接\n      breakLine: false //  断线重连界面\n\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      //测试代码\n      window.test_updateProfile = function () {// let {profile} = this.state;\n        // 测试提交，昵称\n        // profile.nick='杨古波';\n        //关闭公共频道\n        // profile.isOpenPublic=false;\n        //修改头像\n        // profile.ava='./img/public.png';\n        // this.setState( {profile} )\n        // this.setState({chatModePid:'865755342315476'});\n        //是否正在视频通话\n        // this.setState({isFaceTime:true});\n        //等待视频通话界面\n        // this.setState({waitVideo:true});\n        //接收视频聊天消息\n        // this.setState({videoMsg:true});\n        // this.setState({breakLine:true});\n      }; //初始化socket\n      // ChatClient.initSocket('wss://192.168.31.69:8888',ReconnectingWebSocket);\n\n\n      ChatClient.initSocket('wss://172.16.30.90:8888');\n\n      ChatClient.socket.onclose = function (e) {\n        console.log('socket 关闭');\n\n        _this2.setState({\n          breakLine: true,\n          onclose: true\n        });\n      };\n\n      ChatClient.socket.onopen = function (e) {\n        console.log('socket 开启');\n\n        _this2.setState({\n          breakLine: false,\n          onclose: false\n        });\n      };\n\n      ChatClient.on('userInfo', function (data) {\n        var profile = data.content;\n        var id = profile.id;\n        ChatClient.setCookieUid(id, id);\n\n        _this2.setState({\n          profile: profile\n        });\n      });\n      ChatClient.on('onlineUserList', function (data) {\n        var list = data.content;\n        var chatModePid = _this2.state.chatModePid;\n        var arr = [];\n\n        for (var i = 0; i < list.length; i++) {\n          arr.push(list[i].profile.id);\n        }\n\n        list.forEach(function (item, index) {\n          if (arr.indexOf(chatModePid) === -1) {\n            _this2.setState({\n              chatModePid: -1,\n              isFaceTime: false,\n              videoMsg: false,\n              waitVideo: false\n            });\n          }\n        });\n\n        _this2.setState({\n          onlineUserList: list\n        });\n      });\n      ChatClient.on('chatMessage', function (data) {\n        //处理消息\n        _this2.putMsg(data); //\n\n\n        _this2.changeChatObj(data.from);\n      }); //挂断\n\n      ChatClient.on('hangUp', function (data) {\n        console.log('挂断');\n\n        _this2.setState({\n          isFaceTime: false,\n          videoMsg: false\n        });\n\n        ChatClient.pc.close();\n        ChatClient.pc = null;\n        ChatClient.localStream = null;\n\n        _this2.putMsg(data);\n\n        _this2.changeChatObj(data.from);\n      }); //拒绝\n\n      ChatClient.on('refuseVideo', function (data) {\n        _this2.setState({\n          waitVideo: false,\n          isFaceTime: false\n        });\n\n        _this2.putMsg(data);\n\n        _this2.changeChatObj(data.from);\n      }); //\n\n      ChatClient.on('refuseHim', function (data) {\n        _this2.setState({\n          videoMsg: false\n        });\n\n        _this2.putMsg(data);\n\n        _this2.changeChatObj(data.from);\n      }); //更新头像\n\n      ChatClient.on('updateProfile', function (profile) {\n        _this2.setState({\n          profile: profile\n        });\n      }); //发起视频通话\n\n      ChatClient.on('videoRquest', function (data) {\n        var info = data.content;\n        var id = info.id;\n\n        _this2.setState({\n          videoMsg: true,\n          videoReqInfo: info,\n          chatModePid: id\n        });\n\n        ChatClient.mediaStreamTrack && ChatClient.mediaStreamTrack.stop();\n      }); //接受视频通话\n\n      ChatClient.on('agreeVideo', function (data) {\n        var _this2$state = _this2.state,\n            profile = _this2$state.profile,\n            chatModePid = _this2$state.chatModePid;\n        var id = profile.id;\n        var socket = ChatClient.socket;\n\n        _this2.setState({\n          waitVideo: false,\n          isFaceTime: true\n        });\n\n        var localVideo = document.getElementsByClassName('localVideo')[0]; // console.log(localVideo,ChatClient.localStream);\n\n        localVideo.srcObject = ChatClient.localStream;\n        ChatClient.pc.createOffer(function (sdp) {\n          return ChatClient.changeSdpMsg(socket, id, chatModePid, sdp);\n        }, ChatClient.handleError);\n      }); //交换sdp信息\n\n      ChatClient.on('changeSdpMsg', function (data) {\n        console.log('接收到对方sdp');\n        var _this2$state2 = _this2.state,\n            profile = _this2$state2.profile,\n            chatModePid = _this2$state2.chatModePid;\n        var id = profile.id;\n        ChatClient.SetRemoteDescription(data, function () {\n          ChatClient.onAnswercandidate(id, chatModePid);\n        });\n      }); //交换ice信息\n\n      ChatClient.on('changeIceMsg', function (data) {\n        var candidate = data.content;\n        console.log('接收到candidate ，本地添加 candidate'); // console.log(candidate);\n\n        if (candidate !== null) {\n          ChatClient.pc.addIceCandidate(new RTCIceCandidate(candidate));\n        }\n      }); //接受ping\n\n      ChatClient.on('__PING', function () {\n        var profile = _this2.state;\n        var id = profile.profile.id;\n        ChatClient.socket.send(ChatClient.msgModel('PONG', id, '', 'PONG'));\n      }); //接收到消息\n\n      ChatClient.socket.onmessage = function (events) {\n        var data = JSON.parse(events.data);\n        ChatClient.emit(data.type, data);\n      };\n    } //切换是否接收公共聊天消息\n\n  }, {\n    key: \"publicSwitchChange\",\n    value: function publicSwitchChange() {\n      var profile = this.state.profile;\n      var id = profile.id;\n      profile.isOpenPublic = !profile.isOpenPublic; //mock模拟代码\n      // ChatClient.switchPublic(profile).then(profile=>{\n      //   let con = profile.content;\n      //   ChatClient.emit('updateProfile',con);\n      // });\n      //真实代码\n\n      var model = {\n        content: profile,\n        from: id,\n        to: '',\n        type: 'updateProfile'\n      };\n      ChatClient.socket.send(JSON.stringify(model));\n    } //修改昵称\n\n  }, {\n    key: \"changeNick\",\n    value: function changeNick(nick) {\n      var profile = this.state.profile;\n      var id = profile.id;\n      profile.nick = nick; //mock模拟代码\n      // ChatClient.updateNick(profile).then(profile=>{\n      //   let con = profile.content;\n      //   ChatClient.emit('updateProfile',con);\n      // });\n      //真实代码\n\n      var model = {\n        content: profile,\n        from: id,\n        to: '',\n        type: 'updateProfile'\n      };\n      ChatClient.socket.send(JSON.stringify(model));\n    } //修改头像\n\n  }, {\n    key: \"changeAvatar\",\n    value: function changeAvatar(src) {\n      var profile = this.state.profile;\n      var id = profile.id;\n      profile.ava = src; //mock模拟代码\n      // ChatClient.updateAvater(profile).then(profile=>{\n      //   let con = profile.content;\n      //   ChatClient.emit('updateProfile',con);\n      // });\n      //真实代码\n\n      var model = {\n        content: profile,\n        from: id,\n        to: '',\n        type: 'updateProfile'\n      };\n      ChatClient.socket.send(JSON.stringify(model));\n    } //发送消息\n\n  }, {\n    key: \"sendMsg\",\n    value: function sendMsg(msg) {\n      var _this$state = this.state,\n          profile = _this$state.profile,\n          chatRecode = _this$state.chatRecode,\n          chatModePid = _this$state.chatModePid;\n      var id = profile.id,\n          ava = profile.ava; //存储聊天记录\n\n      chatRecode[chatModePid] = chatRecode[chatModePid] || [];\n      chatRecode[chatModePid].push(msg);\n      this.setState({\n        chatRecode: chatRecode\n      }); //mock模拟代码\n      // ChatClient.onMessage(profile,chatModePid).then((data)=>{\n      //   ChatClient.emit('chatMessage',data);\n      // });\n      //真实代码\n\n      var model;\n\n      if (chatModePid === -1) {\n        model = {\n          date: {\n            content: msg,\n            src: ava\n          },\n          from: id,\n          to: 'public',\n          type: 'chatMessage'\n        };\n      } else {\n        model = {\n          date: {\n            content: msg,\n            src: ava\n          },\n          from: id,\n          to: chatModePid,\n          type: 'chatMessage'\n        };\n      }\n\n      ChatClient.socket.send(JSON.stringify(model));\n    } //接收到消息后的事件处理函数\n\n  }, {\n    key: \"putMsg\",\n    value: function putMsg(data) {\n      var chatRecode = this.state.chatRecode;\n      var id = data.from;\n      chatRecode[id] = chatRecode[id] || [];\n      chatRecode[id].push(data); // console.log(data);\n\n      this.setState({\n        chatRecode: chatRecode\n      });\n    } //接收到消息需要同步处理的事件\n\n  }, {\n    key: \"changeChatObj\",\n    value: function changeChatObj(data) {\n      // let {chatModePid} = this.state;\n      // let {from} = data;\n      this.setState({\n        chatModePid: data\n      });\n    } //切换私聊\n\n  }, {\n    key: \"praviteModePid\",\n    value: function praviteModePid(uid) {\n      console.log('聊天对象' + uid);\n      this.setState({\n        chatModePid: uid\n      });\n    } //切换公聊\n\n  }, {\n    key: \"publicModePid\",\n    value: function publicModePid() {\n      this.setState({\n        chatModePid: -1\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state2 = this.state,\n          profile = _this$state2.profile,\n          onlineUserList = _this$state2.onlineUserList,\n          chatModePid = _this$state2.chatModePid,\n          chatRecode = _this$state2.chatRecode,\n          isFaceTime = _this$state2.isFaceTime,\n          waitVideo = _this$state2.waitVideo,\n          videoMsg = _this$state2.videoMsg,\n          videoReqInfo = _this$state2.videoReqInfo,\n          onclose = _this$state2.onclose,\n          breakLine = _this$state2.breakLine;\n      var isOpenPublic = profile.isOpenPublic; // console.log(onlineUserList.profile);\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 7\n        }\n      }, waitVideo ? /*#__PURE__*/React.createElement(VideoWate, {\n        onClick: function onClick() {\n          return _this3.backMain();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }\n      }) : isFaceTime ? /*#__PURE__*/React.createElement(OnVideo, {\n        chatModePid: chatModePid,\n        profile: profile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 79\n        }\n      }) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 136\n        }\n      }, breakLine ? /*#__PURE__*/React.createElement(BreakLine, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 25\n        }\n      }) : null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Information, {\n        profile: profile,\n        onClick: function onClick(nick) {\n          _this3.changeNick(nick);\n        },\n        updateAvatar: function updateAvatar(src) {\n          _this3.changeAvatar(src);\n        },\n        chatModePid: chatModePid,\n        onclose: onclose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"public\",\n        onClick: function onClick() {\n          _this3.publicModePid();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(PublicWrap, {\n        tip: \"\\u5F00\\u542F/\\u5173\\u95ED\\u516C\\u5171\\u804A\\u5929\\u6A21\\u5F0F\",\n        chatModePid: chatModePid,\n        onchange: function onchange() {\n          _this3.publicSwitchChange();\n        },\n        isOpenPublic: isOpenPublic,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"userList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }\n      }, onlineUserList && onlineUserList.map(function (user) {\n        return /*#__PURE__*/React.createElement(Item, {\n          profile: user.profile,\n          key: user.profile.id,\n          isActive: user.profile.id === chatModePid,\n          onChage: function onChage() {\n            _this3.praviteModePid(user.profile.id);\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 60\n          }\n        });\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }\n      }, chatModePid === -1 && !isOpenPublic ? /*#__PURE__*/React.createElement(Mask, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 51\n        }\n      }) : null, /*#__PURE__*/React.createElement(RightTop, {\n        chatModePid: chatModePid,\n        chatRecode: chatRecode,\n        onlineUserList: onlineUserList,\n        profile: profile,\n        videoMsg: videoMsg,\n        videoReqInfo: videoReqInfo,\n        agreeVideo: function agreeVideo() {\n          _this3.setOnVideo();\n        },\n        onclose: onclose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(RightBottom, {\n        onSendMsg: function onSendMsg(msg) {\n          _this3.sendMsg(msg);\n        },\n        startRtc: function startRtc() {\n          return _this3.belongFaceTime();\n        },\n        chatModePid: chatModePid,\n        profile: profile,\n        uploadFile: function uploadFile(str) {\n          _this3.fileUpload(str);\n        },\n        isFaceTime: isFaceTime,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }\n      }))));\n    } //进入视频聊天\n\n  }, {\n    key: \"setOnVideo\",\n    value: function setOnVideo() {\n      this.setState({\n        isFaceTime: true\n      });\n    } //文件上传\n\n  }, {\n    key: \"fileUpload\",\n    value: function fileUpload(str) {\n      var _this$state3 = this.state,\n          chatRecode = _this$state3.chatRecode,\n          chatModePid = _this$state3.chatModePid; //存储聊天记录\n\n      chatRecode[chatModePid] = chatRecode[chatModePid] || [];\n      chatRecode[chatModePid].push(str);\n      this.setState({\n        chatRecode: chatRecode\n      });\n    } //开始视频通话(1)\n\n  }, {\n    key: \"belongFaceTime\",\n    value: function belongFaceTime() {\n      // console.log(ChatClient.localStream);\n      this.setState({\n        waitVideo: true\n      });\n    } //退出等待界面，返回主界面\n\n  }, {\n    key: \"backMain\",\n    value: function backMain() {\n      this.setState({\n        waitVideo: false\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["D:/webFace/src/App.js"],"names":["React","Component","Information","PublicWrap","RightTop","RightBottom","Item","ChatClient","Mask","VideoWate","OnVideo","BreakLine","App","props","state","profile","ava","nick","id","isOpenPublic","onlineUserList","chatRecode","chatInputStaging","isFaceTime","waitVideo","videoMsg","videoReqInfo","chatModePid","onclose","breakLine","window","test_updateProfile","initSocket","socket","e","console","log","setState","onopen","on","data","content","setCookieUid","list","arr","i","length","push","forEach","item","index","indexOf","putMsg","changeChatObj","from","pc","close","localStream","info","mediaStreamTrack","stop","localVideo","document","getElementsByClassName","srcObject","createOffer","sdp","changeSdpMsg","handleError","SetRemoteDescription","onAnswercandidate","candidate","addIceCandidate","RTCIceCandidate","send","msgModel","onmessage","events","JSON","parse","emit","type","model","to","stringify","src","msg","date","uid","backMain","changeNick","changeAvatar","publicModePid","publicSwitchChange","map","user","praviteModePid","setOnVideo","sendMsg","belongFaceTime","str","fileUpload"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAO,aAAP;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CACA;;IAEMC,G;;;;;AACJ,eAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAG;AAAsB;AAC9BC,QAAAA,GAAG,EAAc,EADT;AACsB;AAC9BC,QAAAA,IAAI,EAAa,EAFT;AAEsB;AAC9BC,QAAAA,EAAE,EAAe,EAHT;AAGsB;AAC9BC,QAAAA,YAAY,EAAK,IAJT,CAIqB;;AAJrB,OADC;AAOXC,MAAAA,cAAc,EAAK,EAPR;AAOqB;AAChCC,MAAAA,UAAU,EAAU,CAAY;AAC9B;AADkB,OART;AAWXC,MAAAA,gBAAgB,EAAI,CAAY;AAC9B;AADkB,OAXT;AAcXC,MAAAA,UAAU,EAAS,KAdR;AAcqB;AAChCC,MAAAA,SAAS,EAAU,KAfR;AAeqB;AAChCC,MAAAA,QAAQ,EAAW,KAhBR;AAgBqB;AAChCC,MAAAA,YAAY,EAAK,IAjBN;AAiBsB;AACjCC,MAAAA,WAAW,EAAQ,CAAC,CAlBT;AAkBqB;AAChCC,MAAAA,OAAO,EAAW,KAnBP;AAmBqB;AAChCC,MAAAA,SAAS,EAAS,KApBP,CAoBqB;;AApBrB,KAAb;AAFgB;AAwBjB;;;;WACD,8BAAoB;AAAA;;AAClB;AACAC,MAAAA,MAAM,CAACC,kBAAP,GAA4B,YAAI,CAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,OAjBD,CAFkB,CAoBlB;AACA;;;AACAxB,MAAAA,UAAU,CAACyB,UAAX,CAAsB,yBAAtB;;AACAzB,MAAAA,UAAU,CAAC0B,MAAX,CAAkBL,OAAlB,GAA4B,UAACM,CAAD,EAAK;AAC/BC,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AACA,QAAA,MAAI,CAACC,QAAL,CAAc;AAACR,UAAAA,SAAS,EAAC,IAAX;AAAgBD,UAAAA,OAAO,EAAC;AAAxB,SAAd;AACD,OAHD;;AAIArB,MAAAA,UAAU,CAAC0B,MAAX,CAAkBK,MAAlB,GAA2B,UAACJ,CAAD,EAAK;AAC9BC,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AACA,QAAA,MAAI,CAACC,QAAL,CAAc;AAACR,UAAAA,SAAS,EAAC,KAAX;AAAiBD,UAAAA,OAAO,EAAC;AAAzB,SAAd;AACD,OAHD;;AAIArB,MAAAA,UAAU,CAACgC,EAAX,CAAc,UAAd,EAAyB,UAACC,IAAD,EAAQ;AAC/B,YAAIzB,OAAO,GAAGyB,IAAI,CAACC,OAAnB;AAD+B,YAE1BvB,EAF0B,GAEpBH,OAFoB,CAE1BG,EAF0B;AAG/BX,QAAAA,UAAU,CAACmC,YAAX,CAAwBxB,EAAxB,EAA2BA,EAA3B;;AACA,QAAA,MAAI,CAACmB,QAAL,CAAc;AAACtB,UAAAA,OAAO,EAAPA;AAAD,SAAd;AACD,OALD;AAMAR,MAAAA,UAAU,CAACgC,EAAX,CAAc,gBAAd,EAA+B,UAACC,IAAD,EAAQ;AACrC,YAAIG,IAAI,GAAGH,IAAI,CAACC,OAAhB;AADqC,YAG9Bd,WAH8B,GAGf,MAAI,CAACb,KAHU,CAG9Ba,WAH8B;AAKnC,YAAIiB,GAAG,GAAG,EAAV;;AACA,aAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,IAAI,CAACG,MAAnB,EAA0BD,CAAC,EAA3B,EAA8B;AAC5BD,UAAAA,GAAG,CAACG,IAAJ,CAASJ,IAAI,CAACE,CAAD,CAAJ,CAAQ9B,OAAR,CAAgBG,EAAzB;AACD;;AAEDyB,QAAAA,IAAI,CAACK,OAAL,CAAa,UAACC,IAAD,EAAMC,KAAN,EAAc;AACzB,cAAIN,GAAG,CAACO,OAAJ,CAAYxB,WAAZ,MAA6B,CAAC,CAAlC,EAAqC;AACnC,YAAA,MAAI,CAACU,QAAL,CAAc;AAACV,cAAAA,WAAW,EAAC,CAAC,CAAd;AAAgBJ,cAAAA,UAAU,EAAC,KAA3B;AAAiCE,cAAAA,QAAQ,EAAC,KAA1C;AAAgDD,cAAAA,SAAS,EAAC;AAA1D,aAAd;AACD;AACF,SAJD;;AAMF,QAAA,MAAI,CAACa,QAAL,CAAc;AAACjB,UAAAA,cAAc,EAACuB;AAAhB,SAAd;AACD,OAjBD;AAkBApC,MAAAA,UAAU,CAACgC,EAAX,CAAc,aAAd,EAA4B,UAACC,IAAD,EAAQ;AAClC;AACA,QAAA,MAAI,CAACY,MAAL,CAAYZ,IAAZ,EAFkC,CAGlC;;;AACA,QAAA,MAAI,CAACa,aAAL,CAAmBb,IAAI,CAACc,IAAxB;AACD,OALD,EAvDkB,CA6DlB;;AACA/C,MAAAA,UAAU,CAACgC,EAAX,CAAc,QAAd,EAAuB,UAACC,IAAD,EAAQ;AAC7BL,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;;AACA,QAAA,MAAI,CAACC,QAAL,CAAc;AAACd,UAAAA,UAAU,EAAC,KAAZ;AAAkBE,UAAAA,QAAQ,EAAC;AAA3B,SAAd;;AACAlB,QAAAA,UAAU,CAACgD,EAAX,CAAcC,KAAd;AACAjD,QAAAA,UAAU,CAACgD,EAAX,GAAgB,IAAhB;AACAhD,QAAAA,UAAU,CAACkD,WAAX,GAAyB,IAAzB;;AACA,QAAA,MAAI,CAACL,MAAL,CAAYZ,IAAZ;;AACA,QAAA,MAAI,CAACa,aAAL,CAAmBb,IAAI,CAACc,IAAxB;AACD,OARD,EA9DkB,CAuElB;;AACA/C,MAAAA,UAAU,CAACgC,EAAX,CAAc,aAAd,EAA4B,UAACC,IAAD,EAAQ;AAClC,QAAA,MAAI,CAACH,QAAL,CAAc;AAACb,UAAAA,SAAS,EAAC,KAAX;AAAiBD,UAAAA,UAAU,EAAC;AAA5B,SAAd;;AACA,QAAA,MAAI,CAAC6B,MAAL,CAAYZ,IAAZ;;AACA,QAAA,MAAI,CAACa,aAAL,CAAmBb,IAAI,CAACc,IAAxB;AACD,OAJD,EAxEkB,CA6ElB;;AACA/C,MAAAA,UAAU,CAACgC,EAAX,CAAc,WAAd,EAA0B,UAACC,IAAD,EAAQ;AAChC,QAAA,MAAI,CAACH,QAAL,CAAc;AAACZ,UAAAA,QAAQ,EAAC;AAAV,SAAd;;AACA,QAAA,MAAI,CAAC2B,MAAL,CAAYZ,IAAZ;;AACA,QAAA,MAAI,CAACa,aAAL,CAAmBb,IAAI,CAACc,IAAxB;AACD,OAJD,EA9EkB,CAmFlB;;AACA/C,MAAAA,UAAU,CAACgC,EAAX,CAAc,eAAd,EAA8B,UAACxB,OAAD,EAAW;AACvC,QAAA,MAAI,CAACsB,QAAL,CAAc;AAACtB,UAAAA,OAAO,EAAPA;AAAD,SAAd;AACD,OAFD,EApFkB,CAuFlB;;AACAR,MAAAA,UAAU,CAACgC,EAAX,CAAc,aAAd,EAA4B,UAACC,IAAD,EAAQ;AAClC,YAAIkB,IAAI,GAAGlB,IAAI,CAACC,OAAhB;AADkC,YAE7BvB,EAF6B,GAEvBwC,IAFuB,CAE7BxC,EAF6B;;AAGlC,QAAA,MAAI,CAACmB,QAAL,CAAc;AAACZ,UAAAA,QAAQ,EAAC,IAAV;AAAeC,UAAAA,YAAY,EAACgC,IAA5B;AAAiC/B,UAAAA,WAAW,EAACT;AAA7C,SAAd;;AACAX,QAAAA,UAAU,CAACoD,gBAAX,IAA+BpD,UAAU,CAACoD,gBAAX,CAA4BC,IAA5B,EAA/B;AACD,OALD,EAxFkB,CA8FlB;;AACArD,MAAAA,UAAU,CAACgC,EAAX,CAAc,YAAd,EAA2B,UAACC,IAAD,EAAQ;AAAA,2BACL,MAAI,CAAC1B,KADA;AAAA,YAC5BC,OAD4B,gBAC5BA,OAD4B;AAAA,YACpBY,WADoB,gBACpBA,WADoB;AAAA,YAE5BT,EAF4B,GAEtBH,OAFsB,CAE5BG,EAF4B;AAGjC,YAAIe,MAAM,GAAG1B,UAAU,CAAC0B,MAAxB;;AAEA,QAAA,MAAI,CAACI,QAAL,CAAc;AAACb,UAAAA,SAAS,EAAC,KAAX;AAAiBD,UAAAA,UAAU,EAAC;AAA5B,SAAd;;AACA,YAAIsC,UAAU,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,YAAhC,EAA8C,CAA9C,CAAjB,CANiC,CAOjC;;AACAF,QAAAA,UAAU,CAACG,SAAX,GAAuBzD,UAAU,CAACkD,WAAlC;AAEAlD,QAAAA,UAAU,CAACgD,EAAX,CAAcU,WAAd,CAA0B,UAACC,GAAD;AAAA,iBAAO3D,UAAU,CAAC4D,YAAX,CAAwBlC,MAAxB,EAA+Bf,EAA/B,EAAkCS,WAAlC,EAA8CuC,GAA9C,CAAP;AAAA,SAA1B,EAAoF3D,UAAU,CAAC6D,WAA/F;AACD,OAXD,EA/FkB,CA2GlB;;AACA7D,MAAAA,UAAU,CAACgC,EAAX,CAAc,cAAd,EAA6B,UAACC,IAAD,EAAQ;AACnCL,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AADmC,4BAEP,MAAI,CAACtB,KAFE;AAAA,YAE9BC,OAF8B,iBAE9BA,OAF8B;AAAA,YAEtBY,WAFsB,iBAEtBA,WAFsB;AAAA,YAG9BT,EAH8B,GAGxBH,OAHwB,CAG9BG,EAH8B;AAInCX,QAAAA,UAAU,CAAC8D,oBAAX,CAAgC7B,IAAhC,EAAqC,YAAI;AAACjC,UAAAA,UAAU,CAAC+D,iBAAX,CAA6BpD,EAA7B,EAAgCS,WAAhC;AAA6C,SAAvF;AACD,OALD,EA5GkB,CAkHlB;;AACApB,MAAAA,UAAU,CAACgC,EAAX,CAAc,cAAd,EAA6B,UAACC,IAAD,EAAQ;AACnC,YAAI+B,SAAS,GAAG/B,IAAI,CAACC,OAArB;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAFmC,CAGnC;;AACA,YAAImC,SAAS,KAAK,IAAlB,EAAwB;AACpBhE,UAAAA,UAAU,CAACgD,EAAX,CAAciB,eAAd,CAA8B,IAAIC,eAAJ,CAAoBF,SAApB,CAA9B;AACH;AACF,OAPD,EAnHkB,CA2HlB;;AACAhE,MAAAA,UAAU,CAACgC,EAAX,CAAc,QAAd,EAAuB,YAAI;AACzB,YAAIxB,OAAO,GAAG,MAAI,CAACD,KAAnB;AADyB,YAEpBI,EAFoB,GAEdH,OAAO,CAACA,OAFM,CAEpBG,EAFoB;AAGzBX,QAAAA,UAAU,CAAC0B,MAAX,CAAkByC,IAAlB,CAAuBnE,UAAU,CAACoE,QAAX,CAAoB,MAApB,EAA2BzD,EAA3B,EAA+B,EAA/B,EAAmC,MAAnC,CAAvB;AACD,OAJD,EA5HkB,CAiIlB;;AACAX,MAAAA,UAAU,CAAC0B,MAAX,CAAkB2C,SAAlB,GAA8B,UAASC,MAAT,EAAgB;AAC5C,YAAIrC,IAAI,GAAGsC,IAAI,CAACC,KAAL,CAAWF,MAAM,CAACrC,IAAlB,CAAX;AACAjC,QAAAA,UAAU,CAACyE,IAAX,CAAgBxC,IAAI,CAACyC,IAArB,EAA0BzC,IAA1B;AACD,OAHD;AAID,K,CAED;;;;WACC,8BAAqB;AAAA,UACbzB,OADa,GACD,KAAKD,KADJ,CACbC,OADa;AAAA,UAEdG,EAFc,GAERH,OAFQ,CAEdG,EAFc;AAGnBH,MAAAA,OAAO,CAACI,YAAR,GAAuB,CAACJ,OAAO,CAACI,YAAhC,CAHmB,CAInB;AACA;AACA;AACA;AACA;AACA;;AACA,UAAI+D,KAAK,GAAG;AAACzC,QAAAA,OAAO,EAAC1B,OAAT;AAAiBuC,QAAAA,IAAI,EAACpC,EAAtB;AAAyBiE,QAAAA,EAAE,EAAC,EAA5B;AAA+BF,QAAAA,IAAI,EAAC;AAApC,OAAZ;AACA1E,MAAAA,UAAU,CAAC0B,MAAX,CAAkByC,IAAlB,CAAuBI,IAAI,CAACM,SAAL,CAAeF,KAAf,CAAvB;AACD,K,CACD;;;;WACA,oBAAWjE,IAAX,EAAgB;AAAA,UACRF,OADQ,GACI,KAAKD,KADT,CACRC,OADQ;AAAA,UAETG,EAFS,GAEHH,OAFG,CAETG,EAFS;AAGdH,MAAAA,OAAO,CAACE,IAAR,GAAeA,IAAf,CAHc,CAId;AACA;AACA;AACA;AACA;AACA;;AACA,UAAIiE,KAAK,GAAG;AAACzC,QAAAA,OAAO,EAAC1B,OAAT;AAAiBuC,QAAAA,IAAI,EAACpC,EAAtB;AAAyBiE,QAAAA,EAAE,EAAC,EAA5B;AAA+BF,QAAAA,IAAI,EAAC;AAApC,OAAZ;AACA1E,MAAAA,UAAU,CAAC0B,MAAX,CAAkByC,IAAlB,CAAuBI,IAAI,CAACM,SAAL,CAAeF,KAAf,CAAvB;AACD,K,CACD;;;;WACA,sBAAaG,GAAb,EAAiB;AAAA,UACTtE,OADS,GACG,KAAKD,KADR,CACTC,OADS;AAAA,UAEVG,EAFU,GAEJH,OAFI,CAEVG,EAFU;AAGfH,MAAAA,OAAO,CAACC,GAAR,GAAcqE,GAAd,CAHe,CAIf;AACA;AACA;AACA;AACA;AACA;;AACA,UAAIH,KAAK,GAAG;AAACzC,QAAAA,OAAO,EAAC1B,OAAT;AAAiBuC,QAAAA,IAAI,EAACpC,EAAtB;AAAyBiE,QAAAA,EAAE,EAAC,EAA5B;AAA+BF,QAAAA,IAAI,EAAC;AAApC,OAAZ;AACA1E,MAAAA,UAAU,CAAC0B,MAAX,CAAkByC,IAAlB,CAAuBI,IAAI,CAACM,SAAL,CAAeF,KAAf,CAAvB;AACD,K,CACD;;;;WACA,iBAAQI,GAAR,EAAY;AAAA,wBAC6B,KAAKxE,KADlC;AAAA,UACLC,OADK,eACLA,OADK;AAAA,UACGM,UADH,eACGA,UADH;AAAA,UACcM,WADd,eACcA,WADd;AAAA,UAELT,EAFK,GAEKH,OAFL,CAELG,EAFK;AAAA,UAEFF,GAFE,GAEKD,OAFL,CAEFC,GAFE,EAGV;;AACAK,MAAAA,UAAU,CAACM,WAAD,CAAV,GAA0BN,UAAU,CAACM,WAAD,CAAV,IAA2B,EAArD;AACAN,MAAAA,UAAU,CAACM,WAAD,CAAV,CAAwBoB,IAAxB,CAA6BuC,GAA7B;AACA,WAAKjD,QAAL,CAAc;AAAChB,QAAAA,UAAU,EAAVA;AAAD,OAAd,EANU,CAOV;AACA;AACA;AACA;AACA;;AACA,UAAI6D,KAAJ;;AACA,UAAIvD,WAAW,KAAK,CAAC,CAArB,EAAwB;AACtBuD,QAAAA,KAAK,GAAG;AAACK,UAAAA,IAAI,EAAC;AAAC9C,YAAAA,OAAO,EAAC6C,GAAT;AAAaD,YAAAA,GAAG,EAACrE;AAAjB,WAAN;AAA4BsC,UAAAA,IAAI,EAACpC,EAAjC;AAAoCiE,UAAAA,EAAE,EAAC,QAAvC;AAAgDF,UAAAA,IAAI,EAAC;AAArD,SAAR;AACD,OAFD,MAEK;AACHC,QAAAA,KAAK,GAAG;AAACK,UAAAA,IAAI,EAAC;AAAC9C,YAAAA,OAAO,EAAC6C,GAAT;AAAaD,YAAAA,GAAG,EAACrE;AAAjB,WAAN;AAA4BsC,UAAAA,IAAI,EAACpC,EAAjC;AAAoCiE,UAAAA,EAAE,EAACxD,WAAvC;AAAmDsD,UAAAA,IAAI,EAAC;AAAxD,SAAR;AACD;;AACD1E,MAAAA,UAAU,CAAC0B,MAAX,CAAkByC,IAAlB,CAAuBI,IAAI,CAACM,SAAL,CAAeF,KAAf,CAAvB;AACD,K,CACF;;;;WACA,gBAAO1C,IAAP,EAAY;AAAA,UACLnB,UADK,GACS,KAAKP,KADd,CACLO,UADK;AAEV,UAAIH,EAAE,GAAGsB,IAAI,CAACc,IAAd;AACAjC,MAAAA,UAAU,CAACH,EAAD,CAAV,GAAiBG,UAAU,CAACH,EAAD,CAAV,IAAkB,EAAnC;AACAG,MAAAA,UAAU,CAACH,EAAD,CAAV,CAAe6B,IAAf,CAAoBP,IAApB,EAJU,CAKV;;AACA,WAAKH,QAAL,CAAc;AAAChB,QAAAA,UAAU,EAAVA;AAAD,OAAd;AACD,K,CACD;;;;WACA,uBAAcmB,IAAd,EAAmB;AACjB;AACA;AACA,WAAKH,QAAL,CAAc;AAACV,QAAAA,WAAW,EAACa;AAAb,OAAd;AACD,K,CACD;;;;WACA,wBAAegD,GAAf,EAAoB;AAClBrD,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAOoD,GAAnB;AACA,WAAKnD,QAAL,CAAc;AAAEV,QAAAA,WAAW,EAAC6D;AAAd,OAAd;AACD,K,CACD;;;;WACA,yBAAgB;AACd,WAAKnD,QAAL,CAAc;AAAEV,QAAAA,WAAW,EAAE,CAAC;AAAhB,OAAd;AACD;;;WACD,kBAAS;AAAA;;AAAA,yBAYH,KAAKb,KAZF;AAAA,UAELC,OAFK,gBAELA,OAFK;AAAA,UAGLK,cAHK,gBAGLA,cAHK;AAAA,UAILO,WAJK,gBAILA,WAJK;AAAA,UAKLN,UALK,gBAKLA,UALK;AAAA,UAMLE,UANK,gBAMLA,UANK;AAAA,UAOLC,SAPK,gBAOLA,SAPK;AAAA,UAQLC,QARK,gBAQLA,QARK;AAAA,UASLC,YATK,gBASLA,YATK;AAAA,UAULE,OAVK,gBAULA,OAVK;AAAA,UAWLC,SAXK,gBAWLA,SAXK;AAAA,UAaFV,YAbE,GAacJ,OAbd,CAaFI,YAbE,EAcP;;AACA,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEEK,SAAS,gBAAG,oBAAC,SAAD;AAAW,QAAA,OAAO,EAAE;AAAA,iBAAI,MAAI,CAACiE,QAAL,EAAJ;AAAA,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAAgDlE,UAAU,gBAAG,oBAAC,OAAD;AAAS,QAAA,WAAW,EAAEI,WAAtB;AAAmC,QAAA,OAAO,EAAEZ,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,gBAA4D;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAE3Hc,SAAS,gBAAG,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAAkB,IAFgG,eAI7H;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AAAa,QAAA,OAAO,EAAEd,OAAtB;AAA+B,QAAA,OAAO,EAAE,iBAACE,IAAD,EAAQ;AAAC,UAAA,MAAI,CAACyE,UAAL,CAAgBzE,IAAhB;AAAsB,SAAvE;AACA,QAAA,YAAY,EAAE,sBAACoE,GAAD,EAAO;AAAC,UAAA,MAAI,CAACM,YAAL,CAAkBN,GAAlB;AAAuB,SAD7C;AAC+C,QAAA,WAAW,EAAE1D,WAD5D;AAEA,QAAA,OAAO,EAAEC,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAIE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAwB,QAAA,OAAO,EAAE,mBAAI;AAAC,UAAA,MAAI,CAACgE,aAAL;AAAqB,SAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,UAAD;AAAa,QAAA,GAAG,EAAC,+DAAjB;AAA+B,QAAA,WAAW,EAAEjE,WAA5C;AACC,QAAA,QAAQ,EAAE,oBAAI;AAAC,UAAA,MAAI,CAACkE,kBAAL;AAA0B,SAD1C;AAC4C,QAAA,YAAY,EAAE1E,YAD1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAJF,eAQE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEEC,cAAc,IAAIA,cAAc,CAAC0E,GAAf,CAAmB,UAAAC,IAAI;AAAA,4BAAI,oBAAC,IAAD;AAAM,UAAA,OAAO,EAAEA,IAAI,CAAChF,OAApB;AAA6B,UAAA,GAAG,EAAEgF,IAAI,CAAChF,OAAL,CAAaG,EAA/C;AAC7C,UAAA,QAAQ,EAAE6E,IAAI,CAAChF,OAAL,CAAaG,EAAb,KAAoBS,WADe;AACF,UAAA,OAAO,EAAE,mBAAI;AAAC,YAAA,MAAI,CAACqE,cAAL,CAAoBD,IAAI,CAAChF,OAAL,CAAaG,EAAjC;AAAqC,WADjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAJ;AAAA,OAAvB,CAFpB,CARF,CAJ6H,eAmB7H;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEIS,WAAW,KAAG,CAAC,CAAf,IAAoB,CAACR,YAArB,gBAAoC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAApC,GAA8C,IAFlD,eAIE,oBAAC,QAAD;AAAU,QAAA,WAAW,EAAEQ,WAAvB;AAAoC,QAAA,UAAU,EAAEN,UAAhD;AACA,QAAA,cAAc,EAAED,cADhB;AACgC,QAAA,OAAO,EAAEL,OADzC;AACkD,QAAA,QAAQ,EAAEU,QAD5D;AAEA,QAAA,YAAY,EAAEC,YAFd;AAE4B,QAAA,UAAU,EAAE,sBAAI;AAAC,UAAA,MAAI,CAACuE,UAAL;AAAkB,SAF/D;AAGA,QAAA,OAAO,EAAErE,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,eAQE,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAE,mBAAC0D,GAAD,EAAO;AAAC,UAAA,MAAI,CAACY,OAAL,CAAaZ,GAAb;AAAkB,SAAlD;AACA,QAAA,QAAQ,EAAE;AAAA,iBAAI,MAAI,CAACa,cAAL,EAAJ;AAAA,SADV;AACqC,QAAA,WAAW,EAAExE,WADlD;AAC+D,QAAA,OAAO,EAAEZ,OADxE;AAEA,QAAA,UAAU,EAAE,oBAACqF,GAAD,EAAO;AAAC,UAAA,MAAI,CAACC,UAAL,CAAgBD,GAAhB;AAAqB,SAFzC;AAE2C,QAAA,UAAU,EAAE7E,UAFvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,CAnB6H,CAFjI,CADF;AAsCD,K,CACD;;;;WACA,sBAAY;AACV,WAAKc,QAAL,CAAc;AAACd,QAAAA,UAAU,EAAC;AAAZ,OAAd;AACD,K,CACD;;;;WACA,oBAAW6E,GAAX,EAAe;AAAA,yBACkB,KAAKtF,KADvB;AAAA,UACRO,UADQ,gBACRA,UADQ;AAAA,UACGM,WADH,gBACGA,WADH,EAEb;;AACAN,MAAAA,UAAU,CAACM,WAAD,CAAV,GAA0BN,UAAU,CAACM,WAAD,CAAV,IAA2B,EAArD;AACAN,MAAAA,UAAU,CAACM,WAAD,CAAV,CAAwBoB,IAAxB,CAA6BqD,GAA7B;AACA,WAAK/D,QAAL,CAAc;AAAChB,QAAAA,UAAU,EAAVA;AAAD,OAAd;AACD,K,CACD;;;;WACA,0BAAgB;AACd;AACA,WAAKgB,QAAL,CAAc;AAACb,QAAAA,SAAS,EAAC;AAAX,OAAd;AACD,K,CACD;;;;WACA,oBAAU;AACN,WAAKa,QAAL,CAAc;AAACb,QAAAA,SAAS,EAAC;AAAX,OAAd;AACH;;;;EAnUevB,S;;AAsUlB,eAAeW,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './golab.css'\r\nimport Information from './Components/information';\r\nimport PublicWrap from './Components/publicWrap';\r\nimport RightTop from './Components/rightTop';\r\nimport RightBottom from './Components/rightBottom';\r\nimport Item from './Components/userItem';\r\nimport ChatClient from './ChatClient';\r\n// import FileUpload from './fileUpload';\r\nimport Mask from './Components/mask';\r\nimport VideoWate from './Components/videoWate';\r\nimport OnVideo from './Components/onVideo';\r\nimport BreakLine from './Components/breakLine';\r\n// import './ReconnectingWebSocket';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      profile : {                     //用户信息对象\r\n        ava          :   '',          //用户头像路径\r\n        nick         :   '',          //用户昵称\r\n        id           :   '',          //用户id\r\n        isOpenPublic :   true,       //用户是否开启了公共频道\r\n      },\r\n      onlineUserList :   [],          //  在线用户列表\r\n      chatRecode     :    {           //用户的聊天记录\r\n        //其中的每一项都是由 uid:[]组成，数组中的每一项都是一个标准的messageModel\r\n      },\r\n      chatInputStaging:   {           //输入框暂存区\r\n        //其中的每一项都是由 uid:{string}组成\r\n      },\r\n      isFaceTime     :   false,       //用户是否正在视频聊天\r\n      waitVideo      :   false,       //  用户是否为等待界面\r\n      videoMsg       :   false,       //  是否显示视频聊天消息（当接收到视频通话请求时，变为true）\r\n      videoReqInfo   : null,           //视频聊天请求方的信息\r\n      chatModePid    :   -1,          //正在聊天的模式(公聊，私聊)\r\n      onclose        :  false,        //  断开连接\r\n      breakLine      :  false,        //  断线重连界面\r\n    }\r\n  }\r\n  componentWillMount(){\r\n    //测试代码\r\n    window.test_updateProfile = ()=>{\r\n        // let {profile} = this.state;\r\n        // 测试提交，昵称\r\n        // profile.nick='杨古波';\r\n        //关闭公共频道\r\n        // profile.isOpenPublic=false;\r\n        //修改头像\r\n        // profile.ava='./img/public.png';\r\n        // this.setState( {profile} )\r\n        // this.setState({chatModePid:'865755342315476'});\r\n        //是否正在视频通话\r\n        // this.setState({isFaceTime:true});\r\n        //等待视频通话界面\r\n        // this.setState({waitVideo:true});\r\n        //接收视频聊天消息\r\n        // this.setState({videoMsg:true});\r\n        // this.setState({breakLine:true});\r\n    }\r\n    //初始化socket\r\n    // ChatClient.initSocket('wss://192.168.31.69:8888',ReconnectingWebSocket);\r\n    ChatClient.initSocket('wss://172.16.30.90:8888');\r\n    ChatClient.socket.onclose = (e)=>{\r\n      console.log('socket 关闭');\r\n      this.setState({breakLine:true,onclose:true});\r\n    }\r\n    ChatClient.socket.onopen = (e)=>{\r\n      console.log('socket 开启');\r\n      this.setState({breakLine:false,onclose:false})\r\n    }\r\n    ChatClient.on('userInfo',(data)=>{\r\n      let profile = data.content;\r\n      let {id} = profile;\r\n      ChatClient.setCookieUid(id,id);\r\n      this.setState({profile});\r\n    })\r\n    ChatClient.on('onlineUserList',(data)=>{\r\n      let list = data.content;\r\n\r\n        let {chatModePid} = this.state;\r\n\r\n        let arr = [];\r\n        for(var i=0;i<list.length;i++){\r\n          arr.push(list[i].profile.id);\r\n        }\r\n\r\n        list.forEach((item,index)=>{\r\n          if( arr.indexOf(chatModePid) === -1 ){\r\n            this.setState({chatModePid:-1,isFaceTime:false,videoMsg:false,waitVideo:false})\r\n          }\r\n        })\r\n\r\n      this.setState({onlineUserList:list});\r\n    })\r\n    ChatClient.on('chatMessage',(data)=>{\r\n      //处理消息\r\n      this.putMsg(data);\r\n      //\r\n      this.changeChatObj(data.from);\r\n    })\r\n    //挂断\r\n    ChatClient.on('hangUp',(data)=>{\r\n      console.log('挂断');\r\n      this.setState({isFaceTime:false,videoMsg:false});\r\n      ChatClient.pc.close();\r\n      ChatClient.pc = null;\r\n      ChatClient.localStream = null;\r\n      this.putMsg(data);\r\n      this.changeChatObj(data.from);\r\n    })\r\n    //拒绝\r\n    ChatClient.on('refuseVideo',(data)=>{\r\n      this.setState({waitVideo:false,isFaceTime:false});\r\n      this.putMsg(data);\r\n      this.changeChatObj(data.from);\r\n    })\r\n    //\r\n    ChatClient.on('refuseHim',(data)=>{\r\n      this.setState({videoMsg:false});\r\n      this.putMsg(data);\r\n      this.changeChatObj(data.from);\r\n    })\r\n    //更新头像\r\n    ChatClient.on('updateProfile',(profile)=>{\r\n      this.setState({profile});\r\n    })\r\n    //发起视频通话\r\n    ChatClient.on('videoRquest',(data)=>{\r\n      let info = data.content;\r\n      let {id} = info;\r\n      this.setState({videoMsg:true,videoReqInfo:info,chatModePid:id});\r\n      ChatClient.mediaStreamTrack && ChatClient.mediaStreamTrack.stop();\r\n    })\r\n    //接受视频通话\r\n    ChatClient.on('agreeVideo',(data)=>{\r\n      let {profile,chatModePid} = this.state;\r\n      let {id} = profile;\r\n      let socket = ChatClient.socket;\r\n\r\n      this.setState({waitVideo:false,isFaceTime:true});\r\n      let localVideo = document.getElementsByClassName('localVideo')[0];\r\n      // console.log(localVideo,ChatClient.localStream);\r\n      localVideo.srcObject = ChatClient.localStream;\r\n\r\n      ChatClient.pc.createOffer((sdp)=>ChatClient.changeSdpMsg(socket,id,chatModePid,sdp),ChatClient.handleError);\r\n    })\r\n    //交换sdp信息\r\n    ChatClient.on('changeSdpMsg',(data)=>{\r\n      console.log('接收到对方sdp')\r\n      let {profile,chatModePid} = this.state;\r\n      let {id} = profile;\r\n      ChatClient.SetRemoteDescription(data,()=>{ChatClient.onAnswercandidate(id,chatModePid)});\r\n    })\r\n    //交换ice信息\r\n    ChatClient.on('changeIceMsg',(data)=>{\r\n      let candidate = data.content;\r\n      console.log('接收到candidate ，本地添加 candidate')\r\n      // console.log(candidate);\r\n      if( candidate !== null ){\r\n          ChatClient.pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n      }\r\n    })\r\n    //接受ping\r\n    ChatClient.on('__PING',()=>{\r\n      let profile = this.state;\r\n      let {id} = profile.profile;\r\n      ChatClient.socket.send(ChatClient.msgModel('PONG',id, '', 'PONG'));\r\n    });\r\n    //接收到消息\r\n    ChatClient.socket.onmessage = function(events){\r\n      let data = JSON.parse(events.data);\r\n      ChatClient.emit(data.type,data);\r\n    }\r\n  }\r\n\r\n  //切换是否接收公共聊天消息\r\n   publicSwitchChange() {\r\n     let { profile } = this.state;\r\n     let {id} = profile;\r\n     profile.isOpenPublic = !profile.isOpenPublic;\r\n     //mock模拟代码\r\n     // ChatClient.switchPublic(profile).then(profile=>{\r\n     //   let con = profile.content;\r\n     //   ChatClient.emit('updateProfile',con);\r\n     // });\r\n     //真实代码\r\n     let model = {content:profile,from:id,to:'',type:'updateProfile'};\r\n     ChatClient.socket.send(JSON.stringify(model));\r\n   }\r\n   //修改昵称\r\n   changeNick(nick){\r\n     let { profile } = this.state;\r\n     let {id} = profile;\r\n     profile.nick = nick;\r\n     //mock模拟代码\r\n     // ChatClient.updateNick(profile).then(profile=>{\r\n     //   let con = profile.content;\r\n     //   ChatClient.emit('updateProfile',con);\r\n     // });\r\n     //真实代码\r\n     let model = {content:profile,from:id,to:'',type:'updateProfile'};\r\n     ChatClient.socket.send(JSON.stringify(model));\r\n   }\r\n   //修改头像\r\n   changeAvatar(src){\r\n     let { profile } = this.state;\r\n     let {id} = profile;\r\n     profile.ava = src;\r\n     //mock模拟代码\r\n     // ChatClient.updateAvater(profile).then(profile=>{\r\n     //   let con = profile.content;\r\n     //   ChatClient.emit('updateProfile',con);\r\n     // });\r\n     //真实代码\r\n     let model = {content:profile,from:id,to:'',type:'updateProfile'};\r\n     ChatClient.socket.send(JSON.stringify(model));\r\n   }\r\n   //发送消息\r\n   sendMsg(msg){\r\n     let {profile,chatRecode,chatModePid} = this.state;\r\n     let {id,ava} = profile;\r\n     //存储聊天记录\r\n     chatRecode[chatModePid] = chatRecode[chatModePid] || [];\r\n     chatRecode[chatModePid].push(msg);\r\n     this.setState({chatRecode});\r\n     //mock模拟代码\r\n     // ChatClient.onMessage(profile,chatModePid).then((data)=>{\r\n     //   ChatClient.emit('chatMessage',data);\r\n     // });\r\n     //真实代码\r\n     let model;\r\n     if( chatModePid === -1 ){\r\n       model = {date:{content:msg,src:ava},from:id,to:'public',type:'chatMessage'};\r\n     }else{\r\n       model = {date:{content:msg,src:ava},from:id,to:chatModePid,type:'chatMessage'};\r\n     }\r\n     ChatClient.socket.send(JSON.stringify(model));\r\n   }\r\n  //接收到消息后的事件处理函数\r\n  putMsg(data){\r\n    let {chatRecode} = this.state;\r\n    let id = data.from;\r\n    chatRecode[id] = chatRecode[id] || [];\r\n    chatRecode[id].push(data);\r\n    // console.log(data);\r\n    this.setState({chatRecode});\r\n  }\r\n  //接收到消息需要同步处理的事件\r\n  changeChatObj(data){\r\n    // let {chatModePid} = this.state;\r\n    // let {from} = data;\r\n    this.setState({chatModePid:data});\r\n  }\r\n  //切换私聊\r\n  praviteModePid(uid) {\r\n    console.log('聊天对象'+uid);\r\n    this.setState({ chatModePid:uid });\r\n  }\r\n  //切换公聊\r\n  publicModePid() {\r\n    this.setState({ chatModePid: -1 });\r\n  }\r\n  render() {\r\n    let {\r\n      profile,\r\n      onlineUserList,\r\n      chatModePid,\r\n      chatRecode,\r\n      isFaceTime,\r\n      waitVideo,\r\n      videoMsg,\r\n      videoReqInfo,\r\n      onclose,\r\n      breakLine\r\n    } = this.state;\r\n    let {isOpenPublic} = profile;\r\n    // console.log(onlineUserList.profile);\r\n    return (\r\n      <div>\r\n      {\r\n        waitVideo ? <VideoWate onClick={()=>this.backMain()}/> : isFaceTime ? <OnVideo chatModePid={chatModePid} profile={profile}/> : <div className=\"App\">\r\n          {\r\n            breakLine ? <BreakLine/> : null\r\n          }\r\n          <div className='left'>\r\n            <Information profile={profile} onClick={(nick)=>{this.changeNick(nick)}}\r\n            updateAvatar={(src)=>{this.changeAvatar(src)}} chatModePid={chatModePid}\r\n            onclose={onclose}/>\r\n            <div className='public' onClick={()=>{this.publicModePid()}}>\r\n              <PublicWrap  tip='开启/关闭公共聊天模式' chatModePid={chatModePid}\r\n               onchange={()=>{this.publicSwitchChange()}} isOpenPublic={isOpenPublic}/>\r\n            </div>\r\n            <div className='userList'>\r\n            {\r\n              onlineUserList && onlineUserList.map(user => <Item profile={user.profile} key={user.profile.id }\r\n              isActive={user.profile.id === chatModePid} onChage={()=>{this.praviteModePid(user.profile.id)}}/>)\r\n            }\r\n            </div>\r\n          </div>\r\n          <div className='right'>\r\n            {\r\n              chatModePid===-1 && !isOpenPublic ? <Mask/> : null\r\n            }\r\n            <RightTop chatModePid={chatModePid} chatRecode={chatRecode}\r\n            onlineUserList={onlineUserList} profile={profile} videoMsg={videoMsg}\r\n            videoReqInfo={videoReqInfo} agreeVideo={()=>{this.setOnVideo()}}\r\n            onclose={onclose}/>\r\n            <RightBottom onSendMsg={(msg)=>{this.sendMsg(msg)}}\r\n            startRtc={()=>this.belongFaceTime()} chatModePid={chatModePid} profile={profile}\r\n            uploadFile={(str)=>{this.fileUpload(str)}} isFaceTime={isFaceTime}/>\r\n          </div>\r\n        </div>\r\n      }\r\n      </div>\r\n    );\r\n  }\r\n  //进入视频聊天\r\n  setOnVideo(){\r\n    this.setState({isFaceTime:true});\r\n  }\r\n  //文件上传\r\n  fileUpload(str){\r\n    let {chatRecode,chatModePid} = this.state;\r\n    //存储聊天记录\r\n    chatRecode[chatModePid] = chatRecode[chatModePid] || [];\r\n    chatRecode[chatModePid].push(str);\r\n    this.setState({chatRecode});\r\n  }\r\n  //开始视频通话(1)\r\n  belongFaceTime(){\r\n    // console.log(ChatClient.localStream);\r\n    this.setState({waitVideo:true});\r\n  }\r\n  //退出等待界面，返回主界面\r\n  backMain(){\r\n      this.setState({waitVideo:false})\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}